pipeline {
    agent any
    environment {
        EMAIL_RECIPIENT = "dzassadcass@gmail.com"
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout the repository, including archive.zip
                checkout scm
            }
        }
        stage('Build') {
            steps {
                script {
                    try {
                        sh 'echo "Building the code..." > build.log'
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'build.log'
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                script {
                    try {
                        sh 'echo "Running unit and integration tests..." > test-results.log'
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test-results.log'
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    try {
                        sh 'echo "Analyzing the code..." > code-analysis.log'
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'code-analysis.log'
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    try {
                        sh 'echo "Scanning the code for vulnerabilities..." > security-scan.log'
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'security-scan.log'
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                script {
                    try {
                        sh 'echo "Deploying to staging..." > deploy-staging.log'
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'deploy-staging.log'
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                script {
                    try {
                        sh 'echo "Running integration tests on staging..." > integration-tests-staging.log'
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'integration-tests-staging.log'
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                script {
                    try {
                        sh 'echo "Deploying to production..." > deploy-production.log'
                        currentBuild.result = 'SUCCESS'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'deploy-production.log'
                }
            }
        }
    }
    post {
        always {
            script {
                def buildStatus = currentBuild.result
                def emailBody = """
                Build Status: ${buildStatus}
                Errors: ${buildStatus == 'FAILURE' ? 'See logs for details.' : 'None'}

                The predefined archive.zip file is attached.
                """

                // Send the email with archive.zip attached
                mail to: EMAIL_RECIPIENT,
                     subject: "Build Status Email",
                     body: emailBody,
                     attach: 'archive.zip'
            }
        }
    }
}
